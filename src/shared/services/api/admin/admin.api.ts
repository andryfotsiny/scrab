// src/shared/services/api/admin/admin.api.ts
import { apiClient } from "@/src/shared/services/helpers/apiClient";
import {
    AdminListResponse,
    UsersListResponse,
    UserRole,
    PromoteRequest,
    DemoteRequest,
    PromoteResponse,
    DemoteResponse,
    SystemStatus,
    AuthenticatedUsersResponse,
    ApiResponse
} from "@/src/features/admin/types/admin.types";

class AdminService {

    // ===================================================================
    // GESTION DES R√îLES
    // ===================================================================

    /**
     * R√©cup√®re le r√¥le de l'utilisateur connect√©
     */
    async getMyRole(): Promise<UserRole> {
        try {
            console.log('üé≠ AdminService: R√©cup√©ration de mon r√¥le...');
            return await apiClient.get<UserRole>('/api/admin/my-role');
        } catch (error) {
            console.error('‚ùå AdminService: Erreur r√©cup√©ration r√¥le:', error);
            throw error;
        }
    }

    /**
     * R√©cup√®re le r√¥le d'un utilisateur sp√©cifique
     */
    async getUserRole(betLogin: string): Promise<UserRole> {
        try {
            console.log('üé≠ AdminService: R√©cup√©ration r√¥le utilisateur:', betLogin);
            return await apiClient.get<UserRole>(`/api/admin/role/${betLogin}`);
        } catch (error) {
            console.error('‚ùå AdminService: Erreur r√©cup√©ration r√¥le utilisateur:', error);
            throw error;
        }
    }

    // ===================================================================
    // GESTION DES UTILISATEURS
    // ===================================================================

    /**
     * R√©cup√®re la liste de tous les utilisateurs avec leurs r√¥les
     */
    async getAllUsers(): Promise<UsersListResponse> {
        try {
            console.log('üë• AdminService: R√©cup√©ration liste utilisateurs...');
            return await apiClient.get<UsersListResponse>('/api/users/list');
        } catch (error) {
            console.error('‚ùå AdminService: Erreur r√©cup√©ration utilisateurs:', error);
            throw error;
        }
    }

    /**
     * R√©cup√®re les informations d√©taill√©es d'un utilisateur
     */
    async getUserInfo(betLogin: string): Promise<any> {
        try {
            console.log('üë§ AdminService: R√©cup√©ration infos utilisateur:', betLogin);
            return await apiClient.get(`/api/users/${betLogin}/info`);
        } catch (error) {
            console.error('‚ùå AdminService: Erreur r√©cup√©ration infos utilisateur:', error);
            throw error;
        }
    }

    /**
     * R√©cup√®re la liste des utilisateurs connect√©s
     */
    async getAuthenticatedUsers(): Promise<AuthenticatedUsersResponse> {
        try {
            console.log('üü¢ AdminService: R√©cup√©ration utilisateurs connect√©s...');
            return await apiClient.get<AuthenticatedUsersResponse>('/api/users/authenticated');
        } catch (error) {
            console.error('‚ùå AdminService: Erreur r√©cup√©ration utilisateurs connect√©s:', error);
            throw error;
        }
    }

    // ===================================================================
    // GESTION DES ADMINISTRATEURS
    // ===================================================================

    /**
     * R√©cup√®re la liste de tous les administrateurs
     */
    async getAllAdmins(): Promise<AdminListResponse> {
        try {
            console.log('üë• AdminService: R√©cup√©ration liste admins...');
            return await apiClient.get<AdminListResponse>('/api/admin/list');
        } catch (error) {
            console.error('‚ùå AdminService: Erreur r√©cup√©ration admins:', error);
            throw error;
        }
    }

    /**
     * Promeut un utilisateur au rang d'administrateur
     */
    async promoteToAdmin(request: PromoteRequest): Promise<PromoteResponse> {
        try {
            console.log('‚¨ÜÔ∏è AdminService: Promotion utilisateur:', request.bet_login);
            return await apiClient.post<PromoteResponse>('/api/admin/promote', request);
        } catch (error) {
            console.error('‚ùå AdminService: Erreur promotion:', error);
            throw error;
        }
    }

    /**
     * R√©trograde un administrateur au rang d'utilisateur
     */
    async demoteFromAdmin(request: DemoteRequest): Promise<DemoteResponse> {
        try {
            console.log('‚¨áÔ∏è AdminService: R√©trogradation admin:', request.bet_login);
            return await apiClient.post<DemoteResponse>('/api/admin/demote', request);
        } catch (error) {
            console.error('‚ùå AdminService: Erreur r√©trogradation:', error);
            throw error;
        }
    }

    // ===================================================================
    // STATISTIQUES ET MONITORING
    // ===================================================================

    /**
     * R√©cup√®re le statut g√©n√©ral du syst√®me
     */
    async getSystemStatus(): Promise<SystemStatus> {
        try {
            console.log('üìä AdminService: R√©cup√©ration statut syst√®me...');
            return await apiClient.get<SystemStatus>('/api/status');
        } catch (error) {
            console.error('‚ùå AdminService: Erreur statut syst√®me:', error);
            throw error;
        }
    }

    // ===================================================================
    // M√âTHODES UTILITAIRES
    // ===================================================================

    /**
     * V√©rifie si l'utilisateur connect√© est administrateur
     */
    async isCurrentUserAdmin(): Promise<boolean> {
        try {
            const myRole = await this.getMyRole();
            return myRole.is_admin;
        } catch (error) {
            console.error('‚ùå AdminService: Erreur v√©rification admin:', error);
            return false;
        }
    }

    /**
     * V√©rifie si l'utilisateur connect√© est super-administrateur
     */
    async isCurrentUserSuperAdmin(): Promise<boolean> {
        try {
            const myRole = await this.getMyRole();
            return myRole.is_super_admin;
        } catch (error) {
            console.error('‚ùå AdminService: Erreur v√©rification super-admin:', error);
            return false;
        }
    }

    /**
     * Recherche des utilisateurs par crit√®res
     */
    async searchUsers(query: string, role?: string): Promise<UsersListResponse> {
        try {
            const allUsers = await this.getAllUsers();

            // Filtrage c√¥t√© client (simple)
            let filteredUsers = allUsers.users;

            // Filtre par texte de recherche
            if (query.trim()) {
                const searchQuery = query.toLowerCase();
                filteredUsers = filteredUsers.filter(user =>
                    user.bet_login.toString().includes(searchQuery)
                );
            }

            // Filtre par r√¥le
            if (role && role !== 'all') {
                filteredUsers = filteredUsers.filter(user => user.role === role);
            }

            return {
                total_users: filteredUsers.length,
                users: filteredUsers
            };
        } catch (error) {
            console.error('‚ùå AdminService: Erreur recherche utilisateurs:', error);
            throw error;
        }
    }

    /**
     * Valide les permissions pour une action admin
     */
    async canPerformAction(action: 'promote' | 'demote', targetUser: string): Promise<boolean> {
        try {
            const [myRole, targetRole] = await Promise.all([
                this.getMyRole(),
                this.getUserRole(targetUser)
            ]);

            // Super-admin peut tout faire (sauf se r√©trograder)
            if (myRole.is_super_admin) {
                if (action === 'demote' && targetUser === myRole.user) {
                    return false; // Super-admin ne peut pas se r√©trograder
                }
                return true;
            }

            // Admin normal ne peut pas modifier d'autres admins
            if (myRole.is_admin && targetRole.is_admin) {
                return false;
            }

            // Admin normal peut promouvoir/r√©trograder des utilisateurs normaux
            if (myRole.is_admin && !targetRole.is_admin) {
                return true;
            }

            // Utilisateur normal ne peut rien faire
            return false;
        } catch (error) {
            console.error('‚ùå AdminService: Erreur validation permissions:', error);
            return false;
        }
    }
}

export const adminService = new AdminService();